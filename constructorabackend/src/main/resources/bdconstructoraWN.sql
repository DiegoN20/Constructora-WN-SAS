-- MySQL Script generated by MySQL Workbench
-- Mon Mar 31 18:21:17 2025
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema bdconstructora
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `bdconstructora` ;

-- -----------------------------------------------------
-- Schema bdconstructora
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `bdconstructora` DEFAULT CHARACTER SET utf8mb3 ;
USE `bdconstructora` ;

-- -----------------------------------------------------
-- Table `bdconstructora`.`asignaciones_maestros`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bdconstructora`.`asignaciones_maestros` ;

CREATE TABLE IF NOT EXISTS `bdconstructora`.`asignaciones_maestros` (
  `id_maestro` INT NOT NULL,
  `id_proyecto` INT NOT NULL,
  `fecha_asignacion` DATE NOT NULL,
  `fecha_fin` DATE NULL,
  `estado_asignacion` VARCHAR(15) NOT NULL DEFAULT 'Activo',
  PRIMARY KEY (`id_maestro`, `id_proyecto`),
  INDEX `fk_Maestros de obra_has_Proyectos_Proyectos1_idx` (`id_proyecto` ASC) VISIBLE,
  INDEX `fk_Maestros de obra_has_Proyectos_Maestros de obra1_idx` (`id_maestro` ASC) VISIBLE,
  CONSTRAINT `fk_Maestros de obra_has_Proyectos_Maestros de obra1`
    FOREIGN KEY (`id_maestro`)
    REFERENCES `bdconstructora`.`maestros_de_obra` (`id_maestros_de_obra`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Maestros de obra_has_Proyectos_Proyectos1`
    FOREIGN KEY (`id_proyecto`)
    REFERENCES `bdconstructora`.`proyectos` (`id_proyectos`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `bdconstructora`.`avance_por_pisos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bdconstructora`.`avance_por_pisos` ;

CREATE TABLE IF NOT EXISTS `bdconstructora`.`avance_por_pisos` (
  `id_avance_por_piso` INT NOT NULL AUTO_INCREMENT,
  `proyectos_id_proyectos` INT NOT NULL,
  `insumos_id_insumos` INT NOT NULL,
  `numero_piso` INT NOT NULL,
  `cantidad_comprada` INT NOT NULL,
  `costo_insumos` BIGINT NOT NULL,
  `fecha_compra` DATE NOT NULL,
  `cantidad_usada` INT NULL,
  PRIMARY KEY (`id_avance_por_piso`),
  INDEX `fk_Avance_Por_Pisos_Insumos1_idx` (`insumos_id_insumos` ASC) VISIBLE,
  INDEX `fk_Avance_Por_Pisos_Proyectos1_idx` (`proyectos_id_proyectos` ASC) VISIBLE,
  CONSTRAINT `fk_Avance_Por_Pisos_Insumos1`
    FOREIGN KEY (`insumos_id_insumos`)
    REFERENCES `bdconstructora`.`insumos` (`id_insumos`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Avance_Por_Pisos_Proyectos1`
    FOREIGN KEY (`proyectos_id_proyectos`)
    REFERENCES `bdconstructora`.`proyectos` (`id_proyectos`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `bdconstructora`.`insumos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bdconstructora`.`insumos` ;

CREATE TABLE IF NOT EXISTS `bdconstructora`.`insumos` (
  `id_insumos` INT NOT NULL AUTO_INCREMENT,
  `nombre_insumo` VARCHAR(45) NOT NULL,
  `descripcion` VARCHAR(45) NULL DEFAULT NULL,
  `tipo` VARCHAR(11) NOT NULL,
  PRIMARY KEY (`id_insumos`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `bdconstructora`.`inventario_inicial`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bdconstructora`.`inventario_inicial` ;

CREATE TABLE IF NOT EXISTS `bdconstructora`.`inventario_inicial` (
  `id_inventario_inicial` INT NOT NULL AUTO_INCREMENT,
  `proyectos_id_proyectos` INT NOT NULL,
  `insumos_id_insumos` INT NOT NULL,
  `cantidad` INT NOT NULL,
  `precio` BIGINT NOT NULL,
  `unidad` VARCHAR(25) NOT NULL,
  PRIMARY KEY (`id_inventario_inicial`),
  INDEX `fk_Inventario_Inicial_Insumos1_idx` (`insumos_id_insumos` ASC) VISIBLE,
  INDEX `fk_inventario_inicial_proyectos1_idx` (`proyectos_id_proyectos` ASC) VISIBLE,
  CONSTRAINT `fk_Inventario_Inicial_Insumos1`
    FOREIGN KEY (`insumos_id_insumos`)
    REFERENCES `bdconstructora`.`insumos` (`id_insumos`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_inventario_inicial_proyectos1`
    FOREIGN KEY (`proyectos_id_proyectos`)
    REFERENCES `bdconstructora`.`proyectos` (`id_proyectos`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `bdconstructora`.`maestros_de_obra`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bdconstructora`.`maestros_de_obra` ;

CREATE TABLE IF NOT EXISTS `bdconstructora`.`maestros_de_obra` (
  `id_maestros_de_obra` INT NOT NULL AUTO_INCREMENT,
  `cedula` BIGINT NOT NULL,
  `nombre` VARCHAR(45) NOT NULL,
  `apellido` VARCHAR(45) NOT NULL,
  `telefono` BIGINT NOT NULL,
  `estado_maestro` VARCHAR(20) NOT NULL DEFAULT 'Disponible',
  `salario` BIGINT NOT NULL,
  `fecha_vinculacion` DATE NOT NULL,
  `fecha_desvinculacion` DATE NULL DEFAULT NULL,
  PRIMARY KEY (`id_maestros_de_obra`),
  UNIQUE INDEX `Cedula_UNIQUE` (`cedula` ASC) VISIBLE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `bdconstructora`.`proveedores`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bdconstructora`.`proveedores` ;

CREATE TABLE IF NOT EXISTS `bdconstructora`.`proveedores` (
  `id_proveedores` INT NOT NULL AUTO_INCREMENT,
  `nombre_proveedor` VARCHAR(45) NOT NULL,
  `tipo_servicio` VARCHAR(45) NOT NULL,
  `correo` VARCHAR(45) NULL DEFAULT NULL,
  `telefono` BIGINT NULL DEFAULT NULL,
  PRIMARY KEY (`id_proveedores`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `bdconstructora`.`proyectos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bdconstructora`.`proyectos` ;

CREATE TABLE IF NOT EXISTS `bdconstructora`.`proyectos` (
  `id_proyectos` INT NOT NULL AUTO_INCREMENT,
  `nombre_proyecto` VARCHAR(45) NOT NULL,
  `direccion` VARCHAR(45) NOT NULL,
  `descripcion` VARCHAR(200) NOT NULL,
  `fecha_inicio` DATE NOT NULL,
  `fecha_fin` DATE NULL DEFAULT NULL,
  `presupuesto_previsto` BIGINT NOT NULL,
  `presupuesto_actual` BIGINT NOT NULL DEFAULT 0,
  `presupuesto_restante` BIGINT NOT NULL DEFAULT 0,
  `estado_proyecto` VARCHAR(20) NOT NULL,
  `cantidad_pisos` INT NOT NULL,
  `usuarios_id_usuarios` INT NOT NULL,
  PRIMARY KEY (`id_proyectos`),
  INDEX `fk_Proyectos_Usuarios1_idx` (`usuarios_id_usuarios` ASC) VISIBLE,
  CONSTRAINT `fk_Proyectos_Usuarios1`
    FOREIGN KEY (`usuarios_id_usuarios`)
    REFERENCES `bdconstructora`.`usuarios` (`id_usuarios`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `bdconstructora`.`servicios_externos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bdconstructora`.`servicios_externos` ;

CREATE TABLE IF NOT EXISTS `bdconstructora`.`servicios_externos` (
  `proveedores_id_proveedores` INT NOT NULL,
  `proyectos_id_proyectos` INT NOT NULL,
  `descripcion_servicio` VARCHAR(200) NOT NULL,
  `costo` BIGINT NOT NULL,
  `fecha_inicio` DATE NOT NULL,
  `fecha_fin` DATE NOT NULL,
  `persona_encargada` VARCHAR(100) NULL,
  `telefono` BIGINT NULL,
  PRIMARY KEY (`proveedores_id_proveedores`, `proyectos_id_proyectos`),
  INDEX `fk_Proveedores_has_Proyectos_Proyectos1_idx` (`proyectos_id_proyectos` ASC) VISIBLE,
  INDEX `fk_Proveedores_has_Proyectos_Proveedores1_idx` (`proveedores_id_proveedores` ASC) VISIBLE,
  CONSTRAINT `fk_Proveedores_has_Proyectos_Proveedores1`
    FOREIGN KEY (`proveedores_id_proveedores`)
    REFERENCES `bdconstructora`.`proveedores` (`id_proveedores`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Proveedores_has_Proyectos_Proyectos1`
    FOREIGN KEY (`proyectos_id_proyectos`)
    REFERENCES `bdconstructora`.`proyectos` (`id_proyectos`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `bdconstructora`.`stock`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bdconstructora`.`stock` ;

CREATE TABLE IF NOT EXISTS `bdconstructora`.`stock` (
  `id_stock` INT NOT NULL AUTO_INCREMENT,
  `proyectos_id_proyectos` INT NOT NULL,
  `insumos_id_insumos` INT NOT NULL,
  `cantidad_invertida` BIGINT NOT NULL DEFAULT 0,
  `cantidad_total` BIGINT NOT NULL DEFAULT 0,
  `cantidad_restante` BIGINT GENERATED ALWAYS AS (`cantidad_total` - `cantidad_invertida`) VIRTUAL,
  PRIMARY KEY (`id_stock`),
  INDEX `fk_Stock_Proyectos1_idx` (`proyectos_id_proyectos` ASC) VISIBLE,
  INDEX `fk_Stock_Insumos1_idx` (`insumos_id_insumos` ASC) VISIBLE,
  CONSTRAINT `fk_Stock_Insumos1`
    FOREIGN KEY (`insumos_id_insumos`)
    REFERENCES `bdconstructora`.`insumos` (`id_insumos`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Stock_Proyectos1`
    FOREIGN KEY (`proyectos_id_proyectos`)
    REFERENCES `bdconstructora`.`proyectos` (`id_proyectos`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `bdconstructora`.`usuarios`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bdconstructora`.`usuarios` ;

CREATE TABLE IF NOT EXISTS `bdconstructora`.`usuarios` (
  `id_usuarios` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(100) NOT NULL,
  `apellido` VARCHAR(45) NOT NULL,
  `correo` VARCHAR(45) NOT NULL,
  `contrasena` VARCHAR(70) NOT NULL,
  `rol` VARCHAR(45) NOT NULL,
  `token_password` VARCHAR(100) NULL,
  PRIMARY KEY (`id_usuarios`),
  UNIQUE INDEX `Correo_UNIQUE` (`correo` ASC) VISIBLE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;

USE `bdconstructora` ;

-- -----------------------------------------------------
-- Placeholder table for view `bdconstructora`.`costo_servicios_externos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bdconstructora`.`costo_servicios_externos` (`proyectos_id_proyectos` INT, `total_costo_servicios` INT);

-- -----------------------------------------------------
-- Placeholder table for view `bdconstructora`.`costo_insumos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bdconstructora`.`costo_insumos` (`proyectos_id_proyectos` INT, `total_costo_insumos` INT);

-- -----------------------------------------------------
-- Placeholder table for view `bdconstructora`.`costo_asignaciones_maestros`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bdconstructora`.`costo_asignaciones_maestros` (`id_proyecto` INT, `total_costo_asignaciones` INT);

-- -----------------------------------------------------
-- procedure actualizar_presupuesto_actual
-- -----------------------------------------------------

USE `bdconstructora`;
DROP procedure IF EXISTS `bdconstructora`.`actualizar_presupuesto_actual`;

DELIMITER $$
USE `bdconstructora`$$
CREATE PROCEDURE actualizar_presupuesto_actual()
BEGIN
    UPDATE proyectos p
    LEFT JOIN (
        SELECT 
            proyectos_id_proyectos,
            SUM(costo) AS total_costo_servicios
        FROM 
            servicios_externos
        GROUP BY 
            proyectos_id_proyectos
    ) cse ON p.id_proyectos = cse.proyectos_id_proyectos
    LEFT JOIN (
        SELECT 
            proyectos_id_proyectos,
            SUM(costo_insumos) AS total_costo_insumos
        FROM 
            avance_por_pisos
        GROUP BY 
            proyectos_id_proyectos
    ) ci ON p.id_proyectos = ci.proyectos_id_proyectos
    LEFT JOIN (
        SELECT 
            id_proyecto,
            SUM((DATEDIFF(IFNULL(fecha_fin, CURDATE()), fecha_asignacion) + 1) * (salario / 30)) AS total_costo_asignaciones
        FROM 
            asignaciones_maestros
            JOIN maestros_de_obra ON asignaciones_maestros.id_maestro = maestros_de_obra.id_maestros_de_obra
        GROUP BY 
            id_proyecto
    ) cam ON p.id_proyectos = cam.id_proyecto
    SET p.presupuesto_actual = IFNULL(cse.total_costo_servicios, 0) + IFNULL(ci.total_costo_insumos, 0) + IFNULL(cam.total_costo_asignaciones, 0);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure actualizar_presupuesto_actual_proyecto
-- -----------------------------------------------------

USE `bdconstructora`;
DROP procedure IF EXISTS `bdconstructora`.`actualizar_presupuesto_actual_proyecto`;

DELIMITER $$
USE `bdconstructora`$$
CREATE PROCEDURE actualizar_presupuesto_actual_proyecto(IN proyecto_id INT)
BEGIN
    UPDATE proyectos p
    LEFT JOIN (
        SELECT 
            proyectos_id_proyectos,
            SUM(costo) AS total_costo_servicios
        FROM 
            servicios_externos
        WHERE 
            proyectos_id_proyectos = proyecto_id
        GROUP BY 
            proyectos_id_proyectos
    ) cse ON p.id_proyectos = cse.proyectos_id_proyectos
    LEFT JOIN (
        SELECT 
            proyectos_id_proyectos,
            SUM(costo_insumos) AS total_costo_insumos
        FROM 
            avance_por_pisos
        WHERE 
            proyectos_id_proyectos = proyecto_id
        GROUP BY 
            proyectos_id_proyectos
    ) ci ON p.id_proyectos = ci.proyectos_id_proyectos
    LEFT JOIN (
        SELECT 
            id_proyecto,
            SUM((DATEDIFF(IFNULL(fecha_fin, CURDATE()), fecha_asignacion) + 1) * (salario / 30)) AS total_costo_asignaciones
        FROM 
            asignaciones_maestros
            JOIN maestros_de_obra ON asignaciones_maestros.id_maestro = maestros_de_obra.id_maestros_de_obra
        WHERE 
            id_proyecto = proyecto_id
        GROUP BY 
            id_proyecto
    ) cam ON p.id_proyectos = cam.id_proyecto
    SET p.presupuesto_actual = IFNULL(cse.total_costo_servicios, 0) + IFNULL(ci.total_costo_insumos, 0) + IFNULL(cam.total_costo_asignaciones, 0)
    WHERE p.id_proyectos = proyecto_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure actualizar_presupuesto_restante_proyecto
-- -----------------------------------------------------

USE `bdconstructora`;
DROP procedure IF EXISTS `bdconstructora`.`actualizar_presupuesto_restante_proyecto`;

DELIMITER $$
USE `bdconstructora`$$
CREATE PROCEDURE actualizar_presupuesto_restante_proyecto(IN proyecto_id INT)
BEGIN
    UPDATE proyectos
    SET presupuesto_restante = presupuesto_previsto - presupuesto_actual
    WHERE id_proyectos = proyecto_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- View `bdconstructora`.`costo_servicios_externos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bdconstructora`.`costo_servicios_externos`;
DROP VIEW IF EXISTS `bdconstructora`.`costo_servicios_externos` ;
USE `bdconstructora`;
CREATE  OR REPLACE VIEW costo_servicios_externos AS
SELECT 
    proyectos_id_proyectos,
    SUM(costo) AS total_costo_servicios
FROM 
    servicios_externos
GROUP BY 
    proyectos_id_proyectos;

-- -----------------------------------------------------
-- View `bdconstructora`.`costo_insumos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bdconstructora`.`costo_insumos`;
DROP VIEW IF EXISTS `bdconstructora`.`costo_insumos` ;
USE `bdconstructora`;
CREATE  OR REPLACE VIEW costo_insumos AS
SELECT 
    proyectos_id_proyectos,
    SUM(costo_insumos) AS total_costo_insumos
FROM 
    avance_por_pisos
GROUP BY 
    proyectos_id_proyectos;

-- -----------------------------------------------------
-- View `bdconstructora`.`costo_asignaciones_maestros`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bdconstructora`.`costo_asignaciones_maestros`;
DROP VIEW IF EXISTS `bdconstructora`.`costo_asignaciones_maestros` ;
USE `bdconstructora`;
CREATE  OR REPLACE VIEW costo_asignaciones_maestros AS
SELECT 
    id_proyecto,
    SUM((DATEDIFF(IFNULL(fecha_fin, CURDATE()), fecha_asignacion) + 1) * (salario / 30)) AS total_costo_asignaciones
FROM 
    asignaciones_maestros
    JOIN maestros_de_obra ON asignaciones_maestros.id_maestro = maestros_de_obra.id_maestros_de_obra
GROUP BY 
    id_proyecto;
USE `bdconstructora`;

DELIMITER $$

USE `bdconstructora`$$
DROP TRIGGER IF EXISTS `bdconstructora`.`asignaciones_maestros_BEFORE_INSERT` $$
USE `bdconstructora`$$
CREATE DEFINER = CURRENT_USER TRIGGER `bdconstructora`.`asignaciones_maestros_BEFORE_INSERT` BEFORE INSERT ON `asignaciones_maestros` FOR EACH ROW
BEGIN
	IF (SELECT `estado_maestro` FROM `maestros_de_obra` WHERE `id_maestros_de_obra` = NEW.`id_maestro`) != 'Disponible' THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Maestro no disponible';
	END IF;
    
END$$


USE `bdconstructora`$$
DROP TRIGGER IF EXISTS `bdconstructora`.`asignaciones_maestros_AFTER_INSERT` $$
USE `bdconstructora`$$
CREATE DEFINER = CURRENT_USER TRIGGER `bdconstructora`.`asignaciones_maestros_AFTER_INSERT` AFTER INSERT ON `asignaciones_maestros` FOR EACH ROW
BEGIN
	UPDATE `maestros_de_obra`
	SET `estado_maestro` = 'Asignado_A_Proyecto'
	WHERE `id_maestros_de_obra` = NEW.`id_maestro`;
    CALL actualizar_presupuesto_actual_proyecto(NEW.id_proyecto);
    CALL actualizar_presupuesto_restante_proyecto(NEW.id_proyecto);
END$$


USE `bdconstructora`$$
DROP TRIGGER IF EXISTS `bdconstructora`.`asignaciones_maestros_AFTER_UPDATE` $$
USE `bdconstructora`$$
CREATE DEFINER = CURRENT_USER TRIGGER `bdconstructora`.`asignaciones_maestros_AFTER_UPDATE` AFTER UPDATE ON `asignaciones_maestros` FOR EACH ROW
BEGIN
	IF NEW.`estado_asignacion` IN ('Finalizado', 'Suspendido') THEN	

        -- Cambia el estado del maestro a 'Disponible'
        UPDATE `maestros_de_obra`
        SET `estado_maestro` = 'Disponible'
        WHERE `id_maestros_de_obra` = NEW.`id_maestro`;

	END IF;
	CALL actualizar_presupuesto_actual_proyecto(NEW.id_proyecto);
    CALL actualizar_presupuesto_restante_proyecto(NEW.id_proyecto);
END$$


USE `bdconstructora`$$
DROP TRIGGER IF EXISTS `bdconstructora`.`asignaciones_maestros_AFTER_DELETE` $$
USE `bdconstructora`$$
CREATE DEFINER = CURRENT_USER TRIGGER `bdconstructora`.`asignaciones_maestros_AFTER_DELETE` AFTER DELETE ON `asignaciones_maestros` FOR EACH ROW
BEGIN
	CALL actualizar_presupuesto_actual_proyecto(OLD.id_proyecto);
    CALL actualizar_presupuesto_restante_proyecto(OLD.id_proyecto);
END$$


USE `bdconstructora`$$
DROP TRIGGER IF EXISTS `bdconstructora`.`avance_por_pisos_AFTER_INSERT` $$
USE `bdconstructora`$$
CREATE DEFINER = CURRENT_USER TRIGGER `bdconstructora`.`avance_por_pisos_AFTER_INSERT` AFTER INSERT ON `avance_por_pisos` FOR EACH ROW
BEGIN
	IF NOT EXISTS (
        SELECT 1
        FROM `stock`
        WHERE `proyectos_id_proyectos` = NEW.`proyectos_id_proyectos`
          AND `insumos_id_insumos` = NEW.`insumos_id_insumos`
    ) THEN
        -- Crear nuevo registro en `stock` si no existe
        INSERT INTO `stock` (`proyectos_id_proyectos`, `insumos_id_insumos`, `cantidad_total`, `cantidad_invertida`)
        VALUES (NEW.`proyectos_id_proyectos`, NEW.`insumos_id_insumos`, NEW.`cantidad_comprada`, NEW.`cantidad_usada`);
    ELSE
        -- Actualizar cantidades en `stock` si ya existe
        UPDATE `stock`
        SET `cantidad_total` = `cantidad_total` + NEW.`cantidad_comprada`,
            `cantidad_invertida` = `cantidad_invertida` + NEW.`cantidad_usada`
        WHERE `proyectos_id_proyectos` = NEW.`proyectos_id_proyectos`
          AND `insumos_id_insumos` = NEW.`insumos_id_insumos`;
    END IF;
    CALL actualizar_presupuesto_actual_proyecto(NEW.proyectos_id_proyectos);
    CALL actualizar_presupuesto_restante_proyecto(NEW.proyectos_id_proyectos);
END$$


USE `bdconstructora`$$
DROP TRIGGER IF EXISTS `bdconstructora`.`avance_por_pisos_AFTER_UPDATE` $$
USE `bdconstructora`$$
CREATE DEFINER = CURRENT_USER TRIGGER `bdconstructora`.`avance_por_pisos_AFTER_UPDATE` AFTER UPDATE ON `avance_por_pisos` FOR EACH ROW
BEGIN
	UPDATE `stock`
	SET `cantidad_total` = `cantidad_total` + NEW.`cantidad_comprada` - OLD.`cantidad_comprada`,
		`cantidad_invertida` = `cantidad_invertida` + NEW.`cantidad_usada` - OLD.`cantidad_usada`
	WHERE `proyectos_id_proyectos` = NEW.`proyectos_id_proyectos` AND `insumos_id_insumos` = NEW.`insumos_id_insumos`;
    CALL actualizar_presupuesto_actual_proyecto(NEW.proyectos_id_proyectos);
    CALL actualizar_presupuesto_restante_proyecto(NEW.proyectos_id_proyectos);
END$$


USE `bdconstructora`$$
DROP TRIGGER IF EXISTS `bdconstructora`.`avance_por_pisos_AFTER_DELETE` $$
USE `bdconstructora`$$
CREATE DEFINER = CURRENT_USER TRIGGER `bdconstructora`.`avance_por_pisos_AFTER_DELETE` AFTER DELETE ON `avance_por_pisos` FOR EACH ROW
BEGIN
	UPDATE `stock`
	SET `cantidad_total` = `cantidad_total` - OLD.`cantidad_comprada`,
		`cantidad_invertida` = `cantidad_invertida` - OLD.`cantidad_usada`
	WHERE `proyectos_id_proyectos` = OLD.`proyectos_id_proyectos` AND `insumos_id_insumos` = OLD.`insumos_id_insumos`;
    CALL actualizar_presupuesto_actual_proyecto(OLD.proyectos_id_proyectos);
    CALL actualizar_presupuesto_restante_proyecto(OLD.proyectos_id_proyectos);
END$$


USE `bdconstructora`$$
DROP TRIGGER IF EXISTS `bdconstructora`.`inventario_inicial_AFTER_INSERT` $$
USE `bdconstructora`$$
CREATE DEFINER = CURRENT_USER TRIGGER `bdconstructora`.`inventario_inicial_AFTER_INSERT` AFTER INSERT ON `inventario_inicial` FOR EACH ROW
BEGIN
	IF NOT EXISTS (
        SELECT 1
        FROM `stock`
        WHERE `proyectos_id_proyectos` = NEW.`proyectos_id_proyectos`
          AND `insumos_id_insumos` = NEW.`insumos_id_insumos`
    ) THEN
        -- Crear nuevo registro en stock
        INSERT INTO `stock` (`proyectos_id_proyectos`, `insumos_id_insumos`, `cantidad_total`)
        VALUES (NEW.`proyectos_id_proyectos`, NEW.`insumos_id_insumos`, NEW.`cantidad`);
    ELSE
        -- Actualizar cantidades en stock
        UPDATE `stock`
        SET `cantidad_total` = `cantidad_total` + NEW.`cantidad`
        WHERE `proyectos_id_proyectos` = NEW.`proyectos_id_proyectos`
          AND `insumos_id_insumos` = NEW.`insumos_id_insumos`;
    END IF;
END$$


USE `bdconstructora`$$
DROP TRIGGER IF EXISTS `bdconstructora`.`inventario_inicial_AFTER_UPDATE` $$
USE `bdconstructora`$$
CREATE DEFINER = CURRENT_USER TRIGGER `bdconstructora`.`inventario_inicial_AFTER_UPDATE` AFTER UPDATE ON `inventario_inicial` FOR EACH ROW
BEGIN
	UPDATE `stock`
	SET `cantidad_total` = `cantidad_total` + NEW.`cantidad` - OLD.`cantidad`
	WHERE `proyectos_id_proyectos` = NEW.`proyectos_id_proyectos`
	  AND `insumos_id_insumos` = NEW.`insumos_id_insumos`;
	CALL actualizar_presupuesto_actual_proyecto(NEW.proyectos_id_proyectos);
    CALL actualizar_presupuesto_restante_proyecto(NEW.proyectos_id_proyectos);
END$$

USE `bdconstructora`$$
DROP TRIGGER IF EXISTS `bdconstructora`.`inventario_inicial_AFTER_DELETE` $$
USE `bdconstructora`$$
CREATE DEFINER = CURRENT_USER TRIGGER `bdconstructora`.`inventario_inicial_AFTER_DELETE` AFTER DELETE ON `inventario_inicial` FOR EACH ROW
BEGIN
UPDATE `stock`
	SET `cantidad_total` = `cantidad_total` - OLD.`cantidad`,
		`cantidad_invertida` = `cantidad_invertida` - OLD.`cantidad`
	WHERE `proyectos_id_proyectos` = OLD.`proyectos_id_proyectos` AND `insumos_id_insumos` = OLD.`insumos_id_insumos`;
	CALL actualizar_presupuesto_actual_proyecto(OLD.proyectos_id_proyectos);
    CALL actualizar_presupuesto_restante_proyecto(OLD.proyectos_id_proyectos);
END$$


USE `bdconstructora`$$
DROP TRIGGER IF EXISTS `bdconstructora`.`proyectos_AFTER_UPDATE` $$
USE `bdconstructora`$$
CREATE DEFINER = CURRENT_USER TRIGGER `bdconstructora`.`proyectos_AFTER_UPDATE` AFTER UPDATE ON `proyectos` FOR EACH ROW
BEGIN
	IF NEW.`estado_proyecto` IN ('Finalizado', 'Suspendido') THEN
		UPDATE `asignaciones_maestros`
		SET `estado_asignacion` = NEW.`estado_proyecto`,
        `fecha_fin` = CURDATE()
		WHERE `id_proyecto` = NEW.`id_proyectos`;
		
		UPDATE `maestros_de_obra`
		SET `estado_maestro` = 'Disponible'
		WHERE `id_maestros_de_obra` IN (SELECT `id_maestro` FROM `asignaciones_maestros` WHERE `id_proyecto` = NEW.`id_proyectos`);
	END IF;
END$$


USE `bdconstructora`$$
DROP TRIGGER IF EXISTS `bdconstructora`.`servicios_externos_AFTER_INSERT` $$
USE `bdconstructora`$$
CREATE DEFINER = CURRENT_USER TRIGGER `bdconstructora`.`servicios_externos_AFTER_INSERT` AFTER INSERT ON `servicios_externos` FOR EACH ROW
BEGIN
	CALL actualizar_presupuesto_actual_proyecto(NEW.proyectos_id_proyectos);
    CALL actualizar_presupuesto_restante_proyecto(NEW.proyectos_id_proyectos);
END$$


USE `bdconstructora`$$
DROP TRIGGER IF EXISTS `bdconstructora`.`servicios_externos_AFTER_UPDATE` $$
USE `bdconstructora`$$
CREATE DEFINER = CURRENT_USER TRIGGER `bdconstructora`.`servicios_externos_AFTER_UPDATE` AFTER UPDATE ON `servicios_externos` FOR EACH ROW
BEGIN
	CALL actualizar_presupuesto_actual_proyecto(NEW.proyectos_id_proyectos);
    CALL actualizar_presupuesto_restante_proyecto(NEW.proyectos_id_proyectos);
END$$


USE `bdconstructora`$$
DROP TRIGGER IF EXISTS `bdconstructora`.`servicios_externos_AFTER_DELETE` $$
USE `bdconstructora`$$
CREATE DEFINER = CURRENT_USER TRIGGER `bdconstructora`.`servicios_externos_AFTER_DELETE` AFTER DELETE ON `servicios_externos` FOR EACH ROW
BEGIN
	CALL actualizar_presupuesto_actual_proyecto(OLD.proyectos_id_proyectos);
    CALL actualizar_presupuesto_restante_proyecto(OLD.proyectos_id_proyectos);
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
